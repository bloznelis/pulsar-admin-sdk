/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PoolArenaStats {
    #[serde(rename = "chunkLists", skip_serializing_if = "Option::is_none")]
    pub chunk_lists: Option<Vec<models::PoolChunkListStats>>,
    #[serde(rename = "numActiveAllocations", skip_serializing_if = "Option::is_none")]
    pub num_active_allocations: Option<i64>,
    #[serde(rename = "numActiveHugeAllocations", skip_serializing_if = "Option::is_none")]
    pub num_active_huge_allocations: Option<i64>,
    #[serde(rename = "numActiveNormalAllocations", skip_serializing_if = "Option::is_none")]
    pub num_active_normal_allocations: Option<i64>,
    #[serde(rename = "numActiveSmallAllocations", skip_serializing_if = "Option::is_none")]
    pub num_active_small_allocations: Option<i64>,
    #[serde(rename = "numAllocations", skip_serializing_if = "Option::is_none")]
    pub num_allocations: Option<i64>,
    #[serde(rename = "numChunkLists", skip_serializing_if = "Option::is_none")]
    pub num_chunk_lists: Option<i32>,
    #[serde(rename = "numDeallocations", skip_serializing_if = "Option::is_none")]
    pub num_deallocations: Option<i64>,
    #[serde(rename = "numHugeAllocations", skip_serializing_if = "Option::is_none")]
    pub num_huge_allocations: Option<i64>,
    #[serde(rename = "numHugeDeallocations", skip_serializing_if = "Option::is_none")]
    pub num_huge_deallocations: Option<i64>,
    #[serde(rename = "numNormalAllocations", skip_serializing_if = "Option::is_none")]
    pub num_normal_allocations: Option<i64>,
    #[serde(rename = "numNormalDeallocations", skip_serializing_if = "Option::is_none")]
    pub num_normal_deallocations: Option<i64>,
    #[serde(rename = "numSmallAllocations", skip_serializing_if = "Option::is_none")]
    pub num_small_allocations: Option<i64>,
    #[serde(rename = "numSmallDeallocations", skip_serializing_if = "Option::is_none")]
    pub num_small_deallocations: Option<i64>,
    #[serde(rename = "numSmallSubpages", skip_serializing_if = "Option::is_none")]
    pub num_small_subpages: Option<i32>,
    #[serde(rename = "smallSubpages", skip_serializing_if = "Option::is_none")]
    pub small_subpages: Option<Vec<models::PoolSubpageStats>>,
}

impl PoolArenaStats {
    pub fn new() -> PoolArenaStats {
        PoolArenaStats {
            chunk_lists: None,
            num_active_allocations: None,
            num_active_huge_allocations: None,
            num_active_normal_allocations: None,
            num_active_small_allocations: None,
            num_allocations: None,
            num_chunk_lists: None,
            num_deallocations: None,
            num_huge_allocations: None,
            num_huge_deallocations: None,
            num_normal_allocations: None,
            num_normal_deallocations: None,
            num_small_allocations: None,
            num_small_deallocations: None,
            num_small_subpages: None,
            small_subpages: None,
        }
    }
}

