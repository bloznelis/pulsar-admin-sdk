/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InactiveTopicPolicies {
    #[serde(rename = "deleteWhileInactive", skip_serializing_if = "Option::is_none")]
    pub delete_while_inactive: Option<bool>,
    #[serde(rename = "inactiveTopicDeleteMode", skip_serializing_if = "Option::is_none")]
    pub inactive_topic_delete_mode: Option<InactiveTopicDeleteMode>,
    #[serde(rename = "maxInactiveDurationSeconds", skip_serializing_if = "Option::is_none")]
    pub max_inactive_duration_seconds: Option<i32>,
}

impl InactiveTopicPolicies {
    pub fn new() -> InactiveTopicPolicies {
        InactiveTopicPolicies {
            delete_while_inactive: None,
            inactive_topic_delete_mode: None,
            max_inactive_duration_seconds: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InactiveTopicDeleteMode {
    #[serde(rename = "delete_when_no_subscriptions")]
    NoSubscriptions,
    #[serde(rename = "delete_when_subscriptions_caught_up")]
    SubscriptionsCaughtUp,
}

impl Default for InactiveTopicDeleteMode {
    fn default() -> InactiveTopicDeleteMode {
        Self::NoSubscriptions
    }
}

