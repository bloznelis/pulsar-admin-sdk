/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OffloadPolicies {
    #[serde(rename = "fileSystemProfilePath", skip_serializing_if = "Option::is_none")]
    pub file_system_profile_path: Option<String>,
    #[serde(rename = "fileSystemURI", skip_serializing_if = "Option::is_none")]
    pub file_system_uri: Option<String>,
    #[serde(rename = "gcsManagedLedgerOffloadBucket", skip_serializing_if = "Option::is_none")]
    pub gcs_managed_ledger_offload_bucket: Option<String>,
    #[serde(rename = "gcsManagedLedgerOffloadMaxBlockSizeInBytes", skip_serializing_if = "Option::is_none")]
    pub gcs_managed_ledger_offload_max_block_size_in_bytes: Option<i32>,
    #[serde(rename = "gcsManagedLedgerOffloadReadBufferSizeInBytes", skip_serializing_if = "Option::is_none")]
    pub gcs_managed_ledger_offload_read_buffer_size_in_bytes: Option<i32>,
    #[serde(rename = "gcsManagedLedgerOffloadRegion", skip_serializing_if = "Option::is_none")]
    pub gcs_managed_ledger_offload_region: Option<String>,
    #[serde(rename = "gcsManagedLedgerOffloadServiceAccountKeyFile", skip_serializing_if = "Option::is_none")]
    pub gcs_managed_ledger_offload_service_account_key_file: Option<String>,
    #[serde(rename = "managedLedgerOffloadBucket", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_bucket: Option<String>,
    #[serde(rename = "managedLedgerOffloadDeletionLagInMillis", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_deletion_lag_in_millis: Option<i64>,
    #[serde(rename = "managedLedgerOffloadDriver", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_driver: Option<String>,
    #[serde(rename = "managedLedgerOffloadMaxBlockSizeInBytes", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_max_block_size_in_bytes: Option<i32>,
    #[serde(rename = "managedLedgerOffloadMaxThreads", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_max_threads: Option<i32>,
    #[serde(rename = "managedLedgerOffloadPrefetchRounds", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_prefetch_rounds: Option<i32>,
    #[serde(rename = "managedLedgerOffloadReadBufferSizeInBytes", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_read_buffer_size_in_bytes: Option<i32>,
    #[serde(rename = "managedLedgerOffloadRegion", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_region: Option<String>,
    #[serde(rename = "managedLedgerOffloadServiceEndpoint", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_service_endpoint: Option<String>,
    #[serde(rename = "managedLedgerOffloadThresholdInBytes", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_threshold_in_bytes: Option<i64>,
    #[serde(rename = "managedLedgerOffloadThresholdInSeconds", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offload_threshold_in_seconds: Option<i64>,
    #[serde(rename = "managedLedgerOffloadedReadPriority", skip_serializing_if = "Option::is_none")]
    pub managed_ledger_offloaded_read_priority: Option<ManagedLedgerOffloadedReadPriority>,
    #[serde(rename = "offloadersDirectory", skip_serializing_if = "Option::is_none")]
    pub offloaders_directory: Option<String>,
    #[serde(rename = "s3ManagedLedgerOffloadBucket", skip_serializing_if = "Option::is_none")]
    pub s3_managed_ledger_offload_bucket: Option<String>,
    #[serde(rename = "s3ManagedLedgerOffloadCredentialId", skip_serializing_if = "Option::is_none")]
    pub s3_managed_ledger_offload_credential_id: Option<String>,
    #[serde(rename = "s3ManagedLedgerOffloadCredentialSecret", skip_serializing_if = "Option::is_none")]
    pub s3_managed_ledger_offload_credential_secret: Option<String>,
    #[serde(rename = "s3ManagedLedgerOffloadMaxBlockSizeInBytes", skip_serializing_if = "Option::is_none")]
    pub s3_managed_ledger_offload_max_block_size_in_bytes: Option<i32>,
    #[serde(rename = "s3ManagedLedgerOffloadReadBufferSizeInBytes", skip_serializing_if = "Option::is_none")]
    pub s3_managed_ledger_offload_read_buffer_size_in_bytes: Option<i32>,
    #[serde(rename = "s3ManagedLedgerOffloadRegion", skip_serializing_if = "Option::is_none")]
    pub s3_managed_ledger_offload_region: Option<String>,
    #[serde(rename = "s3ManagedLedgerOffloadRole", skip_serializing_if = "Option::is_none")]
    pub s3_managed_ledger_offload_role: Option<String>,
    #[serde(rename = "s3ManagedLedgerOffloadRoleSessionName", skip_serializing_if = "Option::is_none")]
    pub s3_managed_ledger_offload_role_session_name: Option<String>,
    #[serde(rename = "s3ManagedLedgerOffloadServiceEndpoint", skip_serializing_if = "Option::is_none")]
    pub s3_managed_ledger_offload_service_endpoint: Option<String>,
}

impl OffloadPolicies {
    pub fn new() -> OffloadPolicies {
        OffloadPolicies {
            file_system_profile_path: None,
            file_system_uri: None,
            gcs_managed_ledger_offload_bucket: None,
            gcs_managed_ledger_offload_max_block_size_in_bytes: None,
            gcs_managed_ledger_offload_read_buffer_size_in_bytes: None,
            gcs_managed_ledger_offload_region: None,
            gcs_managed_ledger_offload_service_account_key_file: None,
            managed_ledger_offload_bucket: None,
            managed_ledger_offload_deletion_lag_in_millis: None,
            managed_ledger_offload_driver: None,
            managed_ledger_offload_max_block_size_in_bytes: None,
            managed_ledger_offload_max_threads: None,
            managed_ledger_offload_prefetch_rounds: None,
            managed_ledger_offload_read_buffer_size_in_bytes: None,
            managed_ledger_offload_region: None,
            managed_ledger_offload_service_endpoint: None,
            managed_ledger_offload_threshold_in_bytes: None,
            managed_ledger_offload_threshold_in_seconds: None,
            managed_ledger_offloaded_read_priority: None,
            offloaders_directory: None,
            s3_managed_ledger_offload_bucket: None,
            s3_managed_ledger_offload_credential_id: None,
            s3_managed_ledger_offload_credential_secret: None,
            s3_managed_ledger_offload_max_block_size_in_bytes: None,
            s3_managed_ledger_offload_read_buffer_size_in_bytes: None,
            s3_managed_ledger_offload_region: None,
            s3_managed_ledger_offload_role: None,
            s3_managed_ledger_offload_role_session_name: None,
            s3_managed_ledger_offload_service_endpoint: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ManagedLedgerOffloadedReadPriority {
    #[serde(rename = "BOOKKEEPER_FIRST")]
    BookkeeperFirst,
    #[serde(rename = "TIERED_STORAGE_FIRST")]
    TieredStorageFirst,
}

impl Default for ManagedLedgerOffloadedReadPriority {
    fn default() -> ManagedLedgerOffloadedReadPriority {
        Self::BookkeeperFirst
    }
}

