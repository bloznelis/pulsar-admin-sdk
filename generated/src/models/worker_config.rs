/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkerConfig {
    #[serde(rename = "additionalJavaRuntimeArguments", skip_serializing_if = "Option::is_none")]
    pub additional_java_runtime_arguments: Option<Vec<String>>,
    #[serde(rename = "assignmentWriteMaxRetries", skip_serializing_if = "Option::is_none")]
    pub assignment_write_max_retries: Option<i32>,
    #[serde(rename = "authenticateMetricsEndpoint", skip_serializing_if = "Option::is_none")]
    pub authenticate_metrics_endpoint: Option<bool>,
    #[serde(rename = "authenticationEnabled", skip_serializing_if = "Option::is_none")]
    pub authentication_enabled: Option<bool>,
    #[serde(rename = "authenticationProviders", skip_serializing_if = "Option::is_none")]
    pub authentication_providers: Option<Vec<String>>,
    #[serde(rename = "authorizationEnabled", skip_serializing_if = "Option::is_none")]
    pub authorization_enabled: Option<bool>,
    #[serde(rename = "authorizationProvider", skip_serializing_if = "Option::is_none")]
    pub authorization_provider: Option<String>,
    #[serde(rename = "bookkeeperClientAuthenticationParameters", skip_serializing_if = "Option::is_none")]
    pub bookkeeper_client_authentication_parameters: Option<String>,
    #[serde(rename = "bookkeeperClientAuthenticationParametersName", skip_serializing_if = "Option::is_none")]
    pub bookkeeper_client_authentication_parameters_name: Option<String>,
    #[serde(rename = "bookkeeperClientAuthenticationPlugin", skip_serializing_if = "Option::is_none")]
    pub bookkeeper_client_authentication_plugin: Option<String>,
    #[serde(rename = "brokerClientAuthenticationEnabled", skip_serializing_if = "Option::is_none")]
    pub broker_client_authentication_enabled: Option<bool>,
    #[serde(rename = "brokerClientAuthenticationParameters", skip_serializing_if = "Option::is_none")]
    pub broker_client_authentication_parameters: Option<String>,
    #[serde(rename = "brokerClientAuthenticationPlugin", skip_serializing_if = "Option::is_none")]
    pub broker_client_authentication_plugin: Option<String>,
    #[serde(rename = "brokerClientTrustCertsFilePath", skip_serializing_if = "Option::is_none")]
    pub broker_client_trust_certs_file_path: Option<String>,
    #[serde(rename = "clientAuthenticationParameters", skip_serializing_if = "Option::is_none")]
    pub client_authentication_parameters: Option<String>,
    #[serde(rename = "clientAuthenticationPlugin", skip_serializing_if = "Option::is_none")]
    pub client_authentication_plugin: Option<String>,
    #[serde(rename = "clusterCoordinationTopic", skip_serializing_if = "Option::is_none")]
    pub cluster_coordination_topic: Option<String>,
    #[serde(rename = "clusterCoordinationTopicName", skip_serializing_if = "Option::is_none")]
    pub cluster_coordination_topic_name: Option<String>,
    #[serde(rename = "configurationMetadataStoreUrl", skip_serializing_if = "Option::is_none")]
    pub configuration_metadata_store_url: Option<String>,
    #[serde(rename = "configurationStoreServers", skip_serializing_if = "Option::is_none")]
    pub configuration_store_servers: Option<String>,
    #[serde(rename = "connectorsDirectory", skip_serializing_if = "Option::is_none")]
    pub connectors_directory: Option<String>,
    #[serde(rename = "downloadDirectory", skip_serializing_if = "Option::is_none")]
    pub download_directory: Option<String>,
    #[serde(rename = "enableClassloadingOfBuiltinFiles", skip_serializing_if = "Option::is_none")]
    pub enable_classloading_of_builtin_files: Option<bool>,
    #[serde(rename = "enableClassloadingOfExternalFiles", skip_serializing_if = "Option::is_none")]
    pub enable_classloading_of_external_files: Option<bool>,
    #[serde(rename = "exposeAdminClientEnabled", skip_serializing_if = "Option::is_none")]
    pub expose_admin_client_enabled: Option<bool>,
    #[serde(rename = "failureCheckFreqMs", skip_serializing_if = "Option::is_none")]
    pub failure_check_freq_ms: Option<i64>,
    #[serde(rename = "forwardSourceMessageProperty", skip_serializing_if = "Option::is_none")]
    pub forward_source_message_property: Option<bool>,
    #[serde(rename = "functionAssignmentTopic", skip_serializing_if = "Option::is_none")]
    pub function_assignment_topic: Option<String>,
    #[serde(rename = "functionAssignmentTopicName", skip_serializing_if = "Option::is_none")]
    pub function_assignment_topic_name: Option<String>,
    #[serde(rename = "functionAuthProviderClassName", skip_serializing_if = "Option::is_none")]
    pub function_auth_provider_class_name: Option<String>,
    #[serde(rename = "functionInstanceMaxResources", skip_serializing_if = "Option::is_none")]
    pub function_instance_max_resources: Option<Box<models::Resources>>,
    #[serde(rename = "functionInstanceMinResources", skip_serializing_if = "Option::is_none")]
    pub function_instance_min_resources: Option<Box<models::Resources>>,
    #[serde(rename = "functionInstanceResourceChangeInLockStep", skip_serializing_if = "Option::is_none")]
    pub function_instance_resource_change_in_lock_step: Option<bool>,
    #[serde(rename = "functionInstanceResourceGranularities", skip_serializing_if = "Option::is_none")]
    pub function_instance_resource_granularities: Option<Box<models::Resources>>,
    #[serde(rename = "functionMetadataTopic", skip_serializing_if = "Option::is_none")]
    pub function_metadata_topic: Option<String>,
    #[serde(rename = "functionMetadataTopicName", skip_serializing_if = "Option::is_none")]
    pub function_metadata_topic_name: Option<String>,
    #[serde(rename = "functionRuntimeFactoryClassName", skip_serializing_if = "Option::is_none")]
    pub function_runtime_factory_class_name: Option<String>,
    #[serde(rename = "functionRuntimeFactoryConfigs", skip_serializing_if = "Option::is_none")]
    pub function_runtime_factory_configs: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "functionWebServiceUrl", skip_serializing_if = "Option::is_none")]
    pub function_web_service_url: Option<String>,
    #[serde(rename = "functionsDirectory", skip_serializing_if = "Option::is_none")]
    pub functions_directory: Option<String>,
    #[serde(rename = "functionsWorkerEnablePackageManagement", skip_serializing_if = "Option::is_none")]
    pub functions_worker_enable_package_management: Option<bool>,
    #[serde(rename = "functionsWorkerServiceCustomConfigs", skip_serializing_if = "Option::is_none")]
    pub functions_worker_service_custom_configs: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "functionsWorkerServiceNarPackage", skip_serializing_if = "Option::is_none")]
    pub functions_worker_service_nar_package: Option<String>,
    #[serde(rename = "httpRequestsLimitEnabled", skip_serializing_if = "Option::is_none")]
    pub http_requests_limit_enabled: Option<bool>,
    #[serde(rename = "httpRequestsMaxPerSecond", skip_serializing_if = "Option::is_none")]
    pub http_requests_max_per_second: Option<f64>,
    #[serde(rename = "httpServerAcceptQueueSize", skip_serializing_if = "Option::is_none")]
    pub http_server_accept_queue_size: Option<i32>,
    #[serde(rename = "httpServerThreadPoolQueueSize", skip_serializing_if = "Option::is_none")]
    pub http_server_thread_pool_queue_size: Option<i32>,
    #[serde(rename = "ignoreUnknownConfigFields", skip_serializing_if = "Option::is_none")]
    pub ignore_unknown_config_fields: Option<bool>,
    #[serde(rename = "includeStandardPrometheusMetrics", skip_serializing_if = "Option::is_none")]
    pub include_standard_prometheus_metrics: Option<bool>,
    #[serde(rename = "initialBrokerReconnectMaxRetries", skip_serializing_if = "Option::is_none")]
    pub initial_broker_reconnect_max_retries: Option<i32>,
    #[serde(rename = "initializedDlogMetadata", skip_serializing_if = "Option::is_none")]
    pub initialized_dlog_metadata: Option<bool>,
    #[serde(rename = "instanceLivenessCheckFreqMs", skip_serializing_if = "Option::is_none")]
    pub instance_liveness_check_freq_ms: Option<i64>,
    #[serde(rename = "jvmGCMetricsLoggerClassName", skip_serializing_if = "Option::is_none")]
    pub jvm_gc_metrics_logger_class_name: Option<String>,
    #[serde(rename = "kinitCommand", skip_serializing_if = "Option::is_none")]
    pub kinit_command: Option<String>,
    #[serde(rename = "kubernetesContainerFactory", skip_serializing_if = "Option::is_none")]
    pub kubernetes_container_factory: Option<Box<models::KubernetesContainerFactory>>,
    #[serde(rename = "maxConcurrentHttpRequests", skip_serializing_if = "Option::is_none")]
    pub max_concurrent_http_requests: Option<i32>,
    #[serde(rename = "maxHttpServerConnections", skip_serializing_if = "Option::is_none")]
    pub max_http_server_connections: Option<i32>,
    #[serde(rename = "maxPendingAsyncRequests", skip_serializing_if = "Option::is_none")]
    pub max_pending_async_requests: Option<i32>,
    #[serde(rename = "metadataStoreAllowReadOnlyOperations", skip_serializing_if = "Option::is_none")]
    pub metadata_store_allow_read_only_operations: Option<bool>,
    #[serde(rename = "metadataStoreCacheExpirySeconds", skip_serializing_if = "Option::is_none")]
    pub metadata_store_cache_expiry_seconds: Option<i32>,
    #[serde(rename = "metadataStoreOperationTimeoutSeconds", skip_serializing_if = "Option::is_none")]
    pub metadata_store_operation_timeout_seconds: Option<i32>,
    #[serde(rename = "metadataStoreSessionTimeoutMillis", skip_serializing_if = "Option::is_none")]
    pub metadata_store_session_timeout_millis: Option<i64>,
    #[serde(rename = "narExtractionDirectory", skip_serializing_if = "Option::is_none")]
    pub nar_extraction_directory: Option<String>,
    #[serde(rename = "numFunctionPackageReplicas", skip_serializing_if = "Option::is_none")]
    pub num_function_package_replicas: Option<i32>,
    #[serde(rename = "numHttpServerThreads", skip_serializing_if = "Option::is_none")]
    pub num_http_server_threads: Option<i32>,
    #[serde(rename = "processContainerFactory", skip_serializing_if = "Option::is_none")]
    pub process_container_factory: Option<Box<models::ProcessContainerFactory>>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "proxyRoles", skip_serializing_if = "Option::is_none")]
    pub proxy_roles: Option<Vec<String>>,
    #[serde(rename = "pulsarFunctionsCluster", skip_serializing_if = "Option::is_none")]
    pub pulsar_functions_cluster: Option<String>,
    #[serde(rename = "pulsarFunctionsNamespace", skip_serializing_if = "Option::is_none")]
    pub pulsar_functions_namespace: Option<String>,
    #[serde(rename = "pulsarServiceUrl", skip_serializing_if = "Option::is_none")]
    pub pulsar_service_url: Option<String>,
    #[serde(rename = "pulsarWebServiceUrl", skip_serializing_if = "Option::is_none")]
    pub pulsar_web_service_url: Option<String>,
    #[serde(rename = "rebalanceCheckFreqSec", skip_serializing_if = "Option::is_none")]
    pub rebalance_check_freq_sec: Option<i64>,
    #[serde(rename = "rescheduleTimeoutMs", skip_serializing_if = "Option::is_none")]
    pub reschedule_timeout_ms: Option<i64>,
    #[serde(rename = "runtimeCustomizerClassName", skip_serializing_if = "Option::is_none")]
    pub runtime_customizer_class_name: Option<String>,
    #[serde(rename = "runtimeCustomizerConfig", skip_serializing_if = "Option::is_none")]
    pub runtime_customizer_config: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "saslJaasClientAllowedIds", skip_serializing_if = "Option::is_none")]
    pub sasl_jaas_client_allowed_ids: Option<String>,
    #[serde(rename = "saslJaasServerRoleTokenSignerSecretPath", skip_serializing_if = "Option::is_none")]
    pub sasl_jaas_server_role_token_signer_secret_path: Option<String>,
    #[serde(rename = "saslJaasServerSectionName", skip_serializing_if = "Option::is_none")]
    pub sasl_jaas_server_section_name: Option<String>,
    #[serde(rename = "schedulerClassName", skip_serializing_if = "Option::is_none")]
    pub scheduler_class_name: Option<String>,
    #[serde(rename = "secretsProviderConfiguratorClassName", skip_serializing_if = "Option::is_none")]
    pub secrets_provider_configurator_class_name: Option<String>,
    #[serde(rename = "secretsProviderConfiguratorConfig", skip_serializing_if = "Option::is_none")]
    pub secrets_provider_configurator_config: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "stateStorageProviderImplementation", skip_serializing_if = "Option::is_none")]
    pub state_storage_provider_implementation: Option<String>,
    #[serde(rename = "stateStorageServiceUrl", skip_serializing_if = "Option::is_none")]
    pub state_storage_service_url: Option<String>,
    #[serde(rename = "superUserRoles", skip_serializing_if = "Option::is_none")]
    pub super_user_roles: Option<Vec<String>>,
    #[serde(rename = "threadContainerFactory", skip_serializing_if = "Option::is_none")]
    pub thread_container_factory: Option<Box<models::ThreadContainerFactory>>,
    #[serde(rename = "tlsAllowInsecureConnection", skip_serializing_if = "Option::is_none")]
    pub tls_allow_insecure_connection: Option<bool>,
    #[serde(rename = "tlsCertRefreshCheckDurationSec", skip_serializing_if = "Option::is_none")]
    pub tls_cert_refresh_check_duration_sec: Option<i64>,
    #[serde(rename = "tlsCertificateFilePath", skip_serializing_if = "Option::is_none")]
    pub tls_certificate_file_path: Option<String>,
    #[serde(rename = "tlsEnableHostnameVerification", skip_serializing_if = "Option::is_none")]
    pub tls_enable_hostname_verification: Option<bool>,
    #[serde(rename = "tlsEnabled", skip_serializing_if = "Option::is_none")]
    pub tls_enabled: Option<bool>,
    #[serde(rename = "tlsEnabledWithKeyStore", skip_serializing_if = "Option::is_none")]
    pub tls_enabled_with_key_store: Option<bool>,
    #[serde(rename = "tlsKeyFilePath", skip_serializing_if = "Option::is_none")]
    pub tls_key_file_path: Option<String>,
    #[serde(rename = "tlsKeyStore", skip_serializing_if = "Option::is_none")]
    pub tls_key_store: Option<String>,
    #[serde(rename = "tlsKeyStorePassword", skip_serializing_if = "Option::is_none")]
    pub tls_key_store_password: Option<String>,
    #[serde(rename = "tlsKeyStoreType", skip_serializing_if = "Option::is_none")]
    pub tls_key_store_type: Option<String>,
    #[serde(rename = "tlsProvider", skip_serializing_if = "Option::is_none")]
    pub tls_provider: Option<String>,
    #[serde(rename = "tlsRequireTrustedClientCertOnConnect", skip_serializing_if = "Option::is_none")]
    pub tls_require_trusted_client_cert_on_connect: Option<bool>,
    #[serde(rename = "tlsTrustCertsFilePath", skip_serializing_if = "Option::is_none")]
    pub tls_trust_certs_file_path: Option<String>,
    #[serde(rename = "tlsTrustChainBytes", skip_serializing_if = "Option::is_none")]
    pub tls_trust_chain_bytes: Option<Vec<String>>,
    #[serde(rename = "tlsTrustStore", skip_serializing_if = "Option::is_none")]
    pub tls_trust_store: Option<String>,
    #[serde(rename = "tlsTrustStorePassword", skip_serializing_if = "Option::is_none")]
    pub tls_trust_store_password: Option<String>,
    #[serde(rename = "tlsTrustStoreType", skip_serializing_if = "Option::is_none")]
    pub tls_trust_store_type: Option<String>,
    #[serde(rename = "topicCompactionFrequencySec", skip_serializing_if = "Option::is_none")]
    pub topic_compaction_frequency_sec: Option<i64>,
    #[serde(rename = "uploadBuiltinSinksSources", skip_serializing_if = "Option::is_none")]
    pub upload_builtin_sinks_sources: Option<bool>,
    #[serde(rename = "useCompactedMetadataTopic", skip_serializing_if = "Option::is_none")]
    pub use_compacted_metadata_topic: Option<bool>,
    #[serde(rename = "useTls", skip_serializing_if = "Option::is_none")]
    pub use_tls: Option<bool>,
    #[serde(rename = "validateConnectorConfig", skip_serializing_if = "Option::is_none")]
    pub validate_connector_config: Option<bool>,
    #[serde(rename = "webServiceTlsCiphers", skip_serializing_if = "Option::is_none")]
    pub web_service_tls_ciphers: Option<Vec<String>>,
    #[serde(rename = "webServiceTlsProtocols", skip_serializing_if = "Option::is_none")]
    pub web_service_tls_protocols: Option<Vec<String>>,
    #[serde(rename = "workerHostname", skip_serializing_if = "Option::is_none")]
    pub worker_hostname: Option<String>,
    #[serde(rename = "workerId", skip_serializing_if = "Option::is_none")]
    pub worker_id: Option<String>,
    #[serde(rename = "workerListProbeIntervalSec", skip_serializing_if = "Option::is_none")]
    pub worker_list_probe_interval_sec: Option<i32>,
    #[serde(rename = "workerPort", skip_serializing_if = "Option::is_none")]
    pub worker_port: Option<i32>,
    #[serde(rename = "workerPortTls", skip_serializing_if = "Option::is_none")]
    pub worker_port_tls: Option<i32>,
    #[serde(rename = "workerWebAddress", skip_serializing_if = "Option::is_none")]
    pub worker_web_address: Option<String>,
    #[serde(rename = "workerWebAddressTls", skip_serializing_if = "Option::is_none")]
    pub worker_web_address_tls: Option<String>,
    #[serde(rename = "zooKeeperAllowReadOnlyOperations", skip_serializing_if = "Option::is_none")]
    pub zoo_keeper_allow_read_only_operations: Option<bool>,
    #[serde(rename = "zooKeeperCacheExpirySeconds", skip_serializing_if = "Option::is_none")]
    pub zoo_keeper_cache_expiry_seconds: Option<i32>,
    #[serde(rename = "zooKeeperOperationTimeoutSeconds", skip_serializing_if = "Option::is_none")]
    pub zoo_keeper_operation_timeout_seconds: Option<i32>,
    #[serde(rename = "zooKeeperSessionTimeoutMillis", skip_serializing_if = "Option::is_none")]
    pub zoo_keeper_session_timeout_millis: Option<i64>,
}

impl WorkerConfig {
    pub fn new() -> WorkerConfig {
        WorkerConfig {
            additional_java_runtime_arguments: None,
            assignment_write_max_retries: None,
            authenticate_metrics_endpoint: None,
            authentication_enabled: None,
            authentication_providers: None,
            authorization_enabled: None,
            authorization_provider: None,
            bookkeeper_client_authentication_parameters: None,
            bookkeeper_client_authentication_parameters_name: None,
            bookkeeper_client_authentication_plugin: None,
            broker_client_authentication_enabled: None,
            broker_client_authentication_parameters: None,
            broker_client_authentication_plugin: None,
            broker_client_trust_certs_file_path: None,
            client_authentication_parameters: None,
            client_authentication_plugin: None,
            cluster_coordination_topic: None,
            cluster_coordination_topic_name: None,
            configuration_metadata_store_url: None,
            configuration_store_servers: None,
            connectors_directory: None,
            download_directory: None,
            enable_classloading_of_builtin_files: None,
            enable_classloading_of_external_files: None,
            expose_admin_client_enabled: None,
            failure_check_freq_ms: None,
            forward_source_message_property: None,
            function_assignment_topic: None,
            function_assignment_topic_name: None,
            function_auth_provider_class_name: None,
            function_instance_max_resources: None,
            function_instance_min_resources: None,
            function_instance_resource_change_in_lock_step: None,
            function_instance_resource_granularities: None,
            function_metadata_topic: None,
            function_metadata_topic_name: None,
            function_runtime_factory_class_name: None,
            function_runtime_factory_configs: None,
            function_web_service_url: None,
            functions_directory: None,
            functions_worker_enable_package_management: None,
            functions_worker_service_custom_configs: None,
            functions_worker_service_nar_package: None,
            http_requests_limit_enabled: None,
            http_requests_max_per_second: None,
            http_server_accept_queue_size: None,
            http_server_thread_pool_queue_size: None,
            ignore_unknown_config_fields: None,
            include_standard_prometheus_metrics: None,
            initial_broker_reconnect_max_retries: None,
            initialized_dlog_metadata: None,
            instance_liveness_check_freq_ms: None,
            jvm_gc_metrics_logger_class_name: None,
            kinit_command: None,
            kubernetes_container_factory: None,
            max_concurrent_http_requests: None,
            max_http_server_connections: None,
            max_pending_async_requests: None,
            metadata_store_allow_read_only_operations: None,
            metadata_store_cache_expiry_seconds: None,
            metadata_store_operation_timeout_seconds: None,
            metadata_store_session_timeout_millis: None,
            nar_extraction_directory: None,
            num_function_package_replicas: None,
            num_http_server_threads: None,
            process_container_factory: None,
            properties: None,
            proxy_roles: None,
            pulsar_functions_cluster: None,
            pulsar_functions_namespace: None,
            pulsar_service_url: None,
            pulsar_web_service_url: None,
            rebalance_check_freq_sec: None,
            reschedule_timeout_ms: None,
            runtime_customizer_class_name: None,
            runtime_customizer_config: None,
            sasl_jaas_client_allowed_ids: None,
            sasl_jaas_server_role_token_signer_secret_path: None,
            sasl_jaas_server_section_name: None,
            scheduler_class_name: None,
            secrets_provider_configurator_class_name: None,
            secrets_provider_configurator_config: None,
            state_storage_provider_implementation: None,
            state_storage_service_url: None,
            super_user_roles: None,
            thread_container_factory: None,
            tls_allow_insecure_connection: None,
            tls_cert_refresh_check_duration_sec: None,
            tls_certificate_file_path: None,
            tls_enable_hostname_verification: None,
            tls_enabled: None,
            tls_enabled_with_key_store: None,
            tls_key_file_path: None,
            tls_key_store: None,
            tls_key_store_password: None,
            tls_key_store_type: None,
            tls_provider: None,
            tls_require_trusted_client_cert_on_connect: None,
            tls_trust_certs_file_path: None,
            tls_trust_chain_bytes: None,
            tls_trust_store: None,
            tls_trust_store_password: None,
            tls_trust_store_type: None,
            topic_compaction_frequency_sec: None,
            upload_builtin_sinks_sources: None,
            use_compacted_metadata_topic: None,
            use_tls: None,
            validate_connector_config: None,
            web_service_tls_ciphers: None,
            web_service_tls_protocols: None,
            worker_hostname: None,
            worker_id: None,
            worker_list_probe_interval_sec: None,
            worker_port: None,
            worker_port_tls: None,
            worker_web_address: None,
            worker_web_address_tls: None,
            zoo_keeper_allow_read_only_operations: None,
            zoo_keeper_cache_expiry_seconds: None,
            zoo_keeper_operation_timeout_seconds: None,
            zoo_keeper_session_timeout_millis: None,
        }
    }
}

