/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NonPersistentTopicStatsImpl {
    #[serde(rename = "abortedTxnCount", skip_serializing_if = "Option::is_none")]
    pub aborted_txn_count: Option<i64>,
    #[serde(rename = "averageMsgSize", skip_serializing_if = "Option::is_none")]
    pub average_msg_size: Option<f64>,
    #[serde(rename = "backlogQuotaLimitSize", skip_serializing_if = "Option::is_none")]
    pub backlog_quota_limit_size: Option<i64>,
    #[serde(rename = "backlogQuotaLimitTime", skip_serializing_if = "Option::is_none")]
    pub backlog_quota_limit_time: Option<i64>,
    #[serde(rename = "backlogSize", skip_serializing_if = "Option::is_none")]
    pub backlog_size: Option<i64>,
    #[serde(rename = "bytesInCounter", skip_serializing_if = "Option::is_none")]
    pub bytes_in_counter: Option<i64>,
    #[serde(rename = "bytesOutCounter", skip_serializing_if = "Option::is_none")]
    pub bytes_out_counter: Option<i64>,
    #[serde(rename = "committedTxnCount", skip_serializing_if = "Option::is_none")]
    pub committed_txn_count: Option<i64>,
    #[serde(rename = "compaction", skip_serializing_if = "Option::is_none")]
    pub compaction: Option<Box<models::CompactionStatsImpl>>,
    #[serde(rename = "deduplicationStatus", skip_serializing_if = "Option::is_none")]
    pub deduplication_status: Option<String>,
    #[serde(rename = "delayedMessageIndexSizeInBytes", skip_serializing_if = "Option::is_none")]
    pub delayed_message_index_size_in_bytes: Option<i64>,
    #[serde(rename = "earliestMsgPublishTimeInBacklogs", skip_serializing_if = "Option::is_none")]
    pub earliest_msg_publish_time_in_backlogs: Option<i64>,
    #[serde(rename = "lastOffloadFailureTimeStamp", skip_serializing_if = "Option::is_none")]
    pub last_offload_failure_time_stamp: Option<i64>,
    #[serde(rename = "lastOffloadLedgerId", skip_serializing_if = "Option::is_none")]
    pub last_offload_ledger_id: Option<i64>,
    #[serde(rename = "lastOffloadSuccessTimeStamp", skip_serializing_if = "Option::is_none")]
    pub last_offload_success_time_stamp: Option<i64>,
    #[serde(rename = "msgChunkPublished", skip_serializing_if = "Option::is_none")]
    pub msg_chunk_published: Option<bool>,
    #[serde(rename = "msgDropRate", skip_serializing_if = "Option::is_none")]
    pub msg_drop_rate: Option<f64>,
    #[serde(rename = "msgInCounter", skip_serializing_if = "Option::is_none")]
    pub msg_in_counter: Option<i64>,
    #[serde(rename = "msgOutCounter", skip_serializing_if = "Option::is_none")]
    pub msg_out_counter: Option<i64>,
    #[serde(rename = "msgRateIn", skip_serializing_if = "Option::is_none")]
    pub msg_rate_in: Option<f64>,
    #[serde(rename = "msgRateOut", skip_serializing_if = "Option::is_none")]
    pub msg_rate_out: Option<f64>,
    #[serde(rename = "msgThroughputIn", skip_serializing_if = "Option::is_none")]
    pub msg_throughput_in: Option<f64>,
    #[serde(rename = "msgThroughputOut", skip_serializing_if = "Option::is_none")]
    pub msg_throughput_out: Option<f64>,
    #[serde(rename = "nonContiguousDeletedMessagesRanges", skip_serializing_if = "Option::is_none")]
    pub non_contiguous_deleted_messages_ranges: Option<i32>,
    #[serde(rename = "nonContiguousDeletedMessagesRangesSerializedSize", skip_serializing_if = "Option::is_none")]
    pub non_contiguous_deleted_messages_ranges_serialized_size: Option<i32>,
    #[serde(rename = "offloadedStorageSize", skip_serializing_if = "Option::is_none")]
    pub offloaded_storage_size: Option<i64>,
    #[serde(rename = "oldestBacklogMessageAgeSeconds", skip_serializing_if = "Option::is_none")]
    pub oldest_backlog_message_age_seconds: Option<i64>,
    #[serde(rename = "oldestBacklogMessageSubscriptionName", skip_serializing_if = "Option::is_none")]
    pub oldest_backlog_message_subscription_name: Option<String>,
    #[serde(rename = "ongoingTxnCount", skip_serializing_if = "Option::is_none")]
    pub ongoing_txn_count: Option<i64>,
    #[serde(rename = "ownerBroker", skip_serializing_if = "Option::is_none")]
    pub owner_broker: Option<String>,
    #[serde(rename = "publishRateLimitedTimes", skip_serializing_if = "Option::is_none")]
    pub publish_rate_limited_times: Option<i64>,
    #[serde(rename = "publishers", skip_serializing_if = "Option::is_none")]
    pub publishers: Option<Vec<models::NonPersistentPublisherStats>>,
    #[serde(rename = "replication", skip_serializing_if = "Option::is_none")]
    pub replication: Option<std::collections::HashMap<String, models::NonPersistentReplicatorStats>>,
    #[serde(rename = "storageSize", skip_serializing_if = "Option::is_none")]
    pub storage_size: Option<i64>,
    #[serde(rename = "subscriptions", skip_serializing_if = "Option::is_none")]
    pub subscriptions: Option<std::collections::HashMap<String, models::NonPersistentSubscriptionStats>>,
    #[serde(rename = "topicEpoch", skip_serializing_if = "Option::is_none")]
    pub topic_epoch: Option<i64>,
    #[serde(rename = "waitingPublishers", skip_serializing_if = "Option::is_none")]
    pub waiting_publishers: Option<i32>,
}

impl NonPersistentTopicStatsImpl {
    pub fn new() -> NonPersistentTopicStatsImpl {
        NonPersistentTopicStatsImpl {
            aborted_txn_count: None,
            average_msg_size: None,
            backlog_quota_limit_size: None,
            backlog_quota_limit_time: None,
            backlog_size: None,
            bytes_in_counter: None,
            bytes_out_counter: None,
            committed_txn_count: None,
            compaction: None,
            deduplication_status: None,
            delayed_message_index_size_in_bytes: None,
            earliest_msg_publish_time_in_backlogs: None,
            last_offload_failure_time_stamp: None,
            last_offload_ledger_id: None,
            last_offload_success_time_stamp: None,
            msg_chunk_published: None,
            msg_drop_rate: None,
            msg_in_counter: None,
            msg_out_counter: None,
            msg_rate_in: None,
            msg_rate_out: None,
            msg_throughput_in: None,
            msg_throughput_out: None,
            non_contiguous_deleted_messages_ranges: None,
            non_contiguous_deleted_messages_ranges_serialized_size: None,
            offloaded_storage_size: None,
            oldest_backlog_message_age_seconds: None,
            oldest_backlog_message_subscription_name: None,
            ongoing_txn_count: None,
            owner_broker: None,
            publish_rate_limited_times: None,
            publishers: None,
            replication: None,
            storage_size: None,
            subscriptions: None,
            topic_epoch: None,
            waiting_publishers: None,
        }
    }
}

