/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkerService {
    #[serde(rename = "functions", skip_serializing_if = "Option::is_none")]
    pub functions: Option<Box<models::FunctionsWorkerService>>,
    #[serde(rename = "functionsV2", skip_serializing_if = "Option::is_none")]
    pub functions_v2: Option<Box<models::FunctionsV2WorkerService>>,
    #[serde(rename = "initialized", skip_serializing_if = "Option::is_none")]
    pub initialized: Option<bool>,
    #[serde(rename = "sinks", skip_serializing_if = "Option::is_none")]
    pub sinks: Option<Box<models::SinksWorkerService>>,
    #[serde(rename = "sources", skip_serializing_if = "Option::is_none")]
    pub sources: Option<Box<models::SourcesWorkerService>>,
    #[serde(rename = "workerConfig", skip_serializing_if = "Option::is_none")]
    pub worker_config: Option<Box<models::WorkerConfig>>,
    #[serde(rename = "workers", skip_serializing_if = "Option::is_none")]
    pub workers: Option<serde_json::Value>,
}

impl WorkerService {
    pub fn new() -> WorkerService {
        WorkerService {
            functions: None,
            functions_v2: None,
            initialized: None,
            sinks: None,
            sources: None,
            worker_config: None,
            workers: None,
        }
    }
}

