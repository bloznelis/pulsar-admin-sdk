/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompactionStats {
    #[serde(rename = "lastCompactionDurationTimeInMills", skip_serializing_if = "Option::is_none")]
    pub last_compaction_duration_time_in_mills: Option<i64>,
    #[serde(rename = "lastCompactionFailedTimestamp", skip_serializing_if = "Option::is_none")]
    pub last_compaction_failed_timestamp: Option<i64>,
    #[serde(rename = "lastCompactionRemovedEventCount", skip_serializing_if = "Option::is_none")]
    pub last_compaction_removed_event_count: Option<i64>,
    #[serde(rename = "lastCompactionSucceedTimestamp", skip_serializing_if = "Option::is_none")]
    pub last_compaction_succeed_timestamp: Option<i64>,
}

impl CompactionStats {
    pub fn new() -> CompactionStats {
        CompactionStats {
            last_compaction_duration_time_in_mills: None,
            last_compaction_failed_timestamp: None,
            last_compaction_removed_event_count: None,
            last_compaction_succeed_timestamp: None,
        }
    }
}

